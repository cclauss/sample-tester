test:
  suites:
  - name:  "Language samples test"
    setup:
      - code:
          print('In setup')
    teardown:
      - code:
          print('In teardown')           
    cases:
    - id: Sentiment from text, direct call
      spec:
      - code: |
          out = call("python3 example/googleapis/artman-genfiles/python/language-v1/samples/google/cloud/language_v1/gapic/analyze_sentiment/analyze_sentiment_request_language_sentiment_text.py", content="happy happy smile hope")
          
          import re

          # TODO: still need a way to do text matching in a declarative test like we do below, inside `code`.

          score_found = re.search('score: ([0123456789.]+)', out)  # TODO: Can this be negative?
          require(score_found is not None, 'score matches regexp')
          score = float(score_found.group(1))
          require(score > 0.7, 'score is high')

          magnitude_found = re.search('magnitude: ([0123456789.]+)', out)
          require(magnitude_found is not None, 'magnitude matches regexp')
          magnitude = float(magnitude_found.group(1))
          require(magnitude > 0.7, 'magnitude is high')

    - id: Sentiment from text, API call convention
      spec:
      - code: |
          out = call("Google.Cloud.Language.v1.AnalyzeSentiment:analyze_sentiment_request_language_sentiment_text", content="happy happy smile hope")
          
          import re
          
          # TODO: still need a way to do text matching in a declarative test like we do below, inside `code`.

          score_found = re.search('score: ([0123456789.]+)', out)  # TODO: Can this be negative?
          require(score_found is not None, 'score matches regexp')
          score = float(score_found.group(1))
          require(score > 0.7, 'score is high')

          magnitude_found = re.search('magnitude: ([0123456789.]+)', out)
          require(magnitude_found is not None, 'magnitude matches regexp')
          magnitude = float(magnitude_found.group(1))
          require(magnitude > 0.7, 'magnitude is high')
