test:
  suites:
  - name: "Declarative test"
    setup:
    - uuid: product_id
    - print:
        - "Got UUID! 100% sure"
    - print:
        - "UUID is {}"
        - product_id
    - code:
        print("Product ID for this test suite is {}", product_id)
    teardown:
    - call_may_fail:
        - "testdata/samples/vision/product-search/delete_product.py {} # foo"
        - product_id
    - code: |
        # To be more robust, tear down should not use a sample like we're doing below burather a direct library call or RPC
        call_may_fail("testdata/samples/vision/product-search/delete_product.py {}", product_id)

    cases:
    - id: Product Life
      spec:
      - call:
          - "testdata/samples/vision/product-search/list_products.py # here"
      - print: ["about to check D"]
      - require_not_contains:
          variable: product_id
      - call:
          - "testdata/samples/vision/product-search/create_product.py {} 'Fancy towel' homegoods # 100% D?"
          - product_id
      - code: |
          out = call("testdata/samples/vision/product-search/list_products.py")
          print("about to check P")
          require(product_id not in out, "the product {} should initially be absent", product_id)
  
          call("testdata/samples/vision/product-search/create_product.py {} 'Fancy towel' homegoods # P", product_id)
  
          out = call("testdata/samples/vision/product-search/list_products.py")
          expect(product_id in out, "the product {} should be present after creation", product_id)
  
          call("testdata/samples/vision/product-search/delete_product.py {}", product_id)
  
          out = call("testdata/samples/vision/product-search/list_products.py")
          require(product_id not in out, "the product {} should be absent after deletion", product_id)


  - name:  "Procedural test"
    enabled: False
    setup:
    - code: |
        product_id=uuid()
        print("Product ID for this test suite is {}", product_id)
    teardown:
    - code: |
        # To be more robust, tear down should not use a sample like we're doing below burather a direct library call or RPC
        call_may_fail("testdata/samples/vision/product-search/delete_product.py {}", product_id)

    cases:
    - id: Product Life
      spec:
      - code: |
          out = call("testdata/samples/vision/product-search/list_products.py")
          print("about to check")
          require(product_id not in out, "the product {} should initially be absent", product_id)
  
          call("testdata/samples/vision/product-search/create_product.py {} 'Fancy towel' homegoods", product_id)
  
          out = call("testdata/samples/vision/product-search/list_products.py")
          expect(product_id in out, "the product {} should be present after creation", product_id)
  
          call("testdata/samples/vision/product-search/delete_product.py {}", product_id)
  
          out = call("testdata/samples/vision/product-search/list_products.py")
          require(product_id not in out, "the product {} should be absent after deletion", product_id)


















        
  - name: "Testing"
    enabled: False
    setup: |
      print("Setting up test suite")
      b="  happy!"
      c=uuid()
    cases:
    - id: Alice
      code: |
        print("Inside test case {0} {1}", testcase_id, testcase_num)
        print(b)
        a=10
        if 'a' in locals():
          a=11
        print("Greetings")
        fail()
    - id: Bob
      code: |
        print("Inside test case Bob {:d}", testcase_num)
        print(b)
        a=10
        if 'a' in locals():
          a=11
        print("Greetings")
        print("uuid is {0}", c)
        expect(4==5, "four should equal five")
    - id: Carol
      code: |
        print("Now inside")
        print(" test case Carol {:d}", testcase_num)
        if 'a' not in locals():
          a=20
        print(b)
        print(a)
        print("here")
        abort()
        print("and there")
    - id: Dan
      code: |
        print("Now inside")
        print(" test case Dan {:d}", testcase_num)
        if 'a' not in locals():
          a=30
        print(b)
        print(a)
        print("here {0}", uuid())
        print("uuid is {0}", c)
        require(7==8, "seven equals eight")
        print("and there")      
    - id: Ellen
      code: |
        print("Inside good test case Ellen {:d}", testcase_num)
        print(b)
        a=40
        print("uuid is {0}", c)
        if 'a' in locals():
          a=31
    - id: Felix
      code: |
        print("Inside good test case Felix {:d}", testcase_num)
        print(b)
        a=50
        print("uuid={0}", uuid())
        if 'a' in locals():
          a=31
        out = call("ls -d /tmp/ca* /tmp/s*")
        print(out)
        code, out = call_may_fail("ls my_failure")
        print("code {0}  out:\n{1}\n\n", code, out)
        expect(len(out)==10,"output is size 10")
        out = call("lslkasdj will_fail")
        require(len(out)==0, "failed in explicit check only!")
      
    teardown: |
      print("Tearing down test suite")
      print(a)
      print(b)
      
